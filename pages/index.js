import Head from 'next/head';
import styles from '../styles/Home.module.css';
import { useReactMediaRecorder } from 'react-media-recorder';
import React, { useState, useEffect, useMemo } from 'react';
import dynamic from 'next/dynamic';
import { FileInput } from '../components/FileInput';
import { concatAudio, convertToMp3 } from '../utils/audio_utils';

export default function Home() {
  const Waveform = dynamic(() => import('../components/WaveForm'), {
    ssr: false,
  });

  const [audioFiles, setAudioFiles] = useState([]);
  const [masterAudio, setMasterAudio] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  const handleSaveAudio = async (data) => {
    const blob = await fetch(data).then((r) => r.blob());
    console.log('SAVE AUDIO', data, audioFiles);
    const file = new File([blob], 'recordedAudio.mp3', { type: 'audio/mpeg' });
    console.log('blob', blob, 'file', file);
    const dataMp3 = await convertToMp3(file);
    setAudioFiles([...audioFiles, dataMp3]);
  };

  const handleDrop = async (files) => {
    console.log('DROP', files, audioFiles);
    const mp3Files = await Promise.all(files.map((file) => convertToMp3(file)));
    setAudioFiles((currentFiles) => [...currentFiles, ...mp3Files]);
  };

  const { startRecording, stopRecording } = useReactMediaRecorder({
    audio: true,
    blobPropertyBag: {
      type: 'audio/mpeg',
    },
    onStop: handleSaveAudio,
  });

  const handlePreview = async () => {
    setIsLoading(true);
    audioFiles.map((file) => console.log(file.type));
    const audioBlobs = await Promise.all(
      audioFiles.map((audioFile) => fetch(audioFile).then((r) => r.blob())),
    );
    console.log('LOS ARRAYS', audioBlobs, audioFiles);
    // const concatRecordings = () => {
    //   const blob = new Blob(audioBlobs, { type: 'audio/mpeg' });
    //   // const url = URL.createObjectURL(blob);
    //   // const audio = new Audio(url);
    //   // audio.play();
    //   console.log('resultado', blob.type);
    //   setMasterAudio(blob);
    // };
    const blob = await concatAudio(audioBlobs);
    setMasterAudio(blob);
    setIsLoading(false);
  };
  console.log('OUT', audioFiles);
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Audio editor Proof of Concept</h1>
        <div>
          <FileInput onChange={handleDrop} />
        </div>
        <div>
          <p className={styles.description}>
            Let&apos;s start recording audio:
          </p>
          <button onClick={startRecording}>Start Recording</button>
          <button onClick={stopRecording}>Stop Recording</button>

          <div>
            {audioFiles.length >= 0 &&
              audioFiles.map((audioFile, idx) => (
                <Waveform
                  key={`wave-${idx}`}
                  name={`wave-${idx}`}
                  url={audioFile}
                />
              ))}
          </div>
          <div>
            <p className={styles.description}>All audio files merged:</p>
            <button onClick={handlePreview}>Listen preview</button>
          </div>
          <div>
            {masterAudio && <Waveform url={masterAudio} name="master" />}
          </div>
        </div>
      </main>
    </div>
  );
}
