import Head from 'next/head';
import styles from '../styles/Home.module.css';
import { useReactMediaRecorder } from 'react-media-recorder';
import React, { useState, useEffect, useMemo } from 'react';
import dynamic from 'next/dynamic';
import { FileInput } from '../components/FileInput';
import { convertToMp3, ffmpegConcat, trimAudio } from '../utils/audio_utils';

export default function Home() {
  const Waveform = dynamic(() => import('../components/WaveForm'), {
    ssr: false,
  });

  const [audioFiles, setAudioFiles] = useState([]);
  const [masterAudio, setMasterAudio] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  const handleSaveAudio = async (data) => {
    setIsLoading(true);
    const blob = await fetch(data).then((r) => r.blob());
    const file = new File([blob], 'recordedAudio.wav', { type: 'audio/wav' });
    const dataMp3 = await convertToMp3(file);
    setAudioFiles([...audioFiles, dataMp3]);
    setIsLoading(false);
  };

  const handleDeleteClip = async (idx) => {
    const filteredList = audioFiles.filter((_, index) => index !== idx);
    setAudioFiles(filteredList);
  };

  const handleDrop = async (files) => {
    setIsLoading(true);

    const mp3Files = [];
    // cannot use Promise.all because ffmpeg
    // can run only one task at a time
    for (let i = 0; i < files.length; i++) {
      const mp3File = await convertToMp3(files[i]);
      mp3Files.push(mp3File);
    }
    setAudioFiles((currentFiles) => [...currentFiles, ...mp3Files]);
    setIsLoading(true);
  };

  const { startRecording, stopRecording, status } = useReactMediaRecorder({
    audio: true,
    onStop: handleSaveAudio,
  });

  const handleSaveRegion = async (idx, region) => {
    setIsLoading(true);
    const blobToTrim = audioFiles[idx];

    const dataMp3 = await trimAudio(blobToTrim, {
      start: region.start,
      end: region.end,
    });
    setAudioFiles([...audioFiles, dataMp3]);
    setIsLoading(false);
  };

  const handlePreview = async () => {
    setIsLoading(true);
    const audioBlobs = await Promise.all(
      audioFiles.map((audioFile) => fetch(audioFile).then((r) => r.blob())),
    );

    const blob = await ffmpegConcat(audioBlobs);
    setMasterAudio(blob);
    setIsLoading(false);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Audio editor POC</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          {isLoading ? 'Processing...' : 'Audio editor Proof of Concept'}
        </h1>
        <div>
          <FileInput onChange={handleDrop} />
        </div>
        <div>
          <p className={styles.description}>
            {status === 'recording' ? 'RECORDING....' : 'or record audio:'}
          </p>
          <button onClick={startRecording}>Start Recording</button>
          <button onClick={stopRecording}>Stop Recording</button>

          <div>
            {audioFiles.length >= 0 &&
              audioFiles.map((audioFile, idx) => (
                <Waveform
                  key={`wave-${idx}`}
                  name={`wave-${idx}`}
                  url={audioFile}
                  onRegionSave={(region) => handleSaveRegion(idx, region)}
                  onDelete={() => handleDeleteClip(idx)}
                />
              ))}
          </div>
          <div>
            <p className={styles.description}>
              {audioFiles.length > 0
                ? 'Click to generate de preview'
                : 'Drop some files or record audio to generate a preview'}
            </p>
            {audioFiles.length > 0 && (
              <button onClick={handlePreview}>Generate preview</button>
            )}
          </div>
          <div>
            {masterAudio && (
              <Waveform
                url={masterAudio}
                name="master"
                onDelete={() => setMasterAudio(null)}
              />
            )}
          </div>
        </div>
      </main>
    </div>
  );
}
